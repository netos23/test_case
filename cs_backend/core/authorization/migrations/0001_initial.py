# Generated by Django 3.2.5 on 2023-12-07 19:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models

import authorization.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthCodeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, null=True)),
                ('code', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(default='', max_length=255)),
                ('email', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('phone',
                 models.CharField(max_length=255, null=True, validators=[authorization.validators.validate_phone])),
                ('refresh_token', models.TextField()),
                ('is_verified', models.BooleanField(default=False)),
                ('role',
                 models.CharField(choices=[('client', 'client'), ('admin', 'admin')], default='client', max_length=64)),
                ('gender', models.CharField(choices=[('unknown', 'unknown'), ('male', 'male'), ('female', 'female')],
                                            default='unknown', max_length=64)),
                ('birthday', models.DateField(null=True)),
                ('address', models.CharField(max_length=1024, null=True)),
                ('tg_chat_id', models.IntegerField(null=True)),
                ('tg_chat_start_link', models.URLField(max_length=256, null=True)),
                ('groups', models.ManyToManyField(to='auth.Group')),
                ('user_permissions', models.ManyToManyField(to='auth.Permission')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
